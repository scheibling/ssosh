"""
Django settings for ssosh_server project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import environ
from pathlib import Path
from sshkey_tools.keys import PrivateKey
##
# Django settings
##
env = environ.Env()

BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Europe/Stockholm'

DEBUG = env('DEBUG', default=False)
BASE_URL = env('BASE_URL', default='http://localhost:8000')
USE_X_FORWARDED_HOST = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECRET_KEY = env('SECRET_KEY', default='i_am_an_insecure_key_please_change_me_as_soon_as_possible')
ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000']

##
# Application settings
##

##
# OpenID Connect
##
LOGIN_REDIRECT_URL = '/success'
OIDC_AUTH_SERVER = env('OIDC_AUTH_SERVER')
OIDC_AUTH_CLIENT_ID = env('OIDC_AUTH_CLIENT_ID')
OIDC_AUTH_CLIENT_SECRET = env('OIDC_AUTH_CLIENT_SECRET')
OIDC_AUTH_SCOPE = env('OIDC_AUTH_SCOPE', default="openid,profile").split(",")
# OIDC_GET_USER_FUNCTION = ""
# OIDC_AUTH_PROTOCOL = facebook/github/gitlab

##
# Host settings
##
HOST_REFRESH_INTERVAL = env('HOST_REFRESH_INTERVAL', default=60)


##
# Certificate Authority settings
##
SSH_CA = PrivateKey.from_file(
    env('SSH_CA_KEY_PATH', default='ssh_ca'),
    env('SSH_CA_KEY_PASSWORD', default=None)
)

SSH_CA_KEYID_IDENTIFIER = env('SSH_CA_KEYID_IDENTIFIER', default='username')

SSH_CA_DEFAULT_VALIDITY = {
    "hours": 8
}

SSH_CA_DEFAULT_EXTENSIONS = [
    'permit-agent-forwarding',
    'permit-X11-forwarding'
]

SSH_CA_DEFAULT_CRITICAL_OPTIONS = []

SSH_CA_SCOPES = {
    'client.bootstrap': {
        'requires_admin': False,
        'requires_staff': True
    },
    'client.login': {
        'requires_admin': False,
        'requires_staff': False
    },
    'client.certificate': {
        'requires_admin': False,
        'requires_staff': False
    },
    'host.bootstrap': {
        'requires_admin': True,
        'requires_staff': False
    }
}

# SSH_CA = PrivateKey.from_string(
#     key_string,
#     password,
#     encoding
# )

# SSH_CA = PrivateKey.from_class(
#     cryptography.hazmat.asymmetric.x.y.XYPrivateKey
# )


# Application definition
INSTALLED_APPS = [
    'jazzmin',
    'ssosh_server.oidc_client',
    'ssosh_server.interface',
    'ssosh_server.hosts',
    'ssosh_server.device_auth',
    'ssosh_server.client',
    'ssosh_server.authority',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ssosh_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
                os.path.join(BASE_DIR, 'ssosh_server', 'interface', 'templates')
            ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ssosh_server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'ssosh_server', 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JAZZMIN_SETTINGS = {
    "site_title": "SSO Shell",
    "site_header": "SSO Shell",
    "site_brand": "SSO Shell",
    "changeform_format": "collapsible",
    "show_ui_builder": False
}

JAZZMIN_UI_TWEAKS = {
    # "brand_colour": "navbar-blue",
    # # "accent": "accent-white",
    # "navbar": "navbar-dark",
    # "theme": "darkly",
    "sidebar": "sidebar-dark-blue",
    "sidebar_nav_flat_style": True
}